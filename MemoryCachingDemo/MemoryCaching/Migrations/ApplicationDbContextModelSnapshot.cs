// <auto-generated />
using System;
using MemoryCaching.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemoryCaching.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemoryCaching.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7978),
                            Name = "Laptop",
                            Price = 999.99m
                        },
                        new
                        {
                            Id = 2,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7991),
                            Name = "Mouse",
                            Price = 19.99m
                        },
                        new
                        {
                            Id = 3,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7992),
                            Name = "Keyboard",
                            Price = 49.99m
                        },
                        new
                        {
                            Id = 4,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7993),
                            Name = "Monitor",
                            Price = 199.99m
                        },
                        new
                        {
                            Id = 5,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7994),
                            Name = "Printer",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 6,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7995),
                            Name = "Smartphone",
                            Price = 699.99m
                        },
                        new
                        {
                            Id = 7,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7996),
                            Name = "Tablet",
                            Price = 299.99m
                        },
                        new
                        {
                            Id = 8,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7996),
                            Name = "Headphones",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 9,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7997),
                            Name = "Webcam",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 10,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7998),
                            Name = "External Hard Drive",
                            Price = 129.99m
                        },
                        new
                        {
                            Id = 11,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(7998),
                            Name = "USB Flash Drive",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 12,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8002),
                            Name = "Graphics Card",
                            Price = 499.99m
                        },
                        new
                        {
                            Id = 13,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8002),
                            Name = "Motherboard",
                            Price = 149.99m
                        },
                        new
                        {
                            Id = 14,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8003),
                            Name = "Power Supply",
                            Price = 89.99m
                        },
                        new
                        {
                            Id = 15,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8004),
                            Name = "SSD",
                            Price = 99.99m
                        },
                        new
                        {
                            Id = 16,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8005),
                            Name = "RAM",
                            Price = 79.99m
                        },
                        new
                        {
                            Id = 17,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8005),
                            Name = "Cooling Fan",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 18,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8006),
                            Name = "Case",
                            Price = 69.99m
                        },
                        new
                        {
                            Id = 19,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8007),
                            Name = "Network Card",
                            Price = 59.99m
                        },
                        new
                        {
                            Id = 20,
                            LastUpdated = new DateTime(2025, 7, 28, 19, 28, 2, 656, DateTimeKind.Utc).AddTicks(8007),
                            Name = "Sound Card",
                            Price = 89.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
